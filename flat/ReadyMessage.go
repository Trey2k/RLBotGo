// automatically generated by the FlatBuffers compiler, do not modify

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Sent when connecting to RLBot to indicate what type of messages are desired.
/// This could be sent by a bot, or a bot manager governing several bots, an
/// overlay, or any other utility that connects to the RLBot process.
type ReadyMessage struct {
	_tab flatbuffers.Table
}

func GetRootAsReadyMessage(buf []byte, offset flatbuffers.UOffsetT) *ReadyMessage {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ReadyMessage{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *ReadyMessage) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ReadyMessage) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ReadyMessage) WantsBallPredictions() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ReadyMessage) MutateWantsBallPredictions(n byte) bool {
	return rcv._tab.MutateByteSlot(4, n)
}

func (rcv *ReadyMessage) WantsQuickChat() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ReadyMessage) MutateWantsQuickChat(n byte) bool {
	return rcv._tab.MutateByteSlot(6, n)
}

func (rcv *ReadyMessage) WantsGameMessages() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ReadyMessage) MutateWantsGameMessages(n byte) bool {
	return rcv._tab.MutateByteSlot(8, n)
}

func ReadyMessageStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func ReadyMessageAddWantsBallPredictions(builder *flatbuffers.Builder, wantsBallPredictions byte) {
	builder.PrependByteSlot(0, wantsBallPredictions, 0)
}
func ReadyMessageAddWantsQuickChat(builder *flatbuffers.Builder, wantsQuickChat byte) {
	builder.PrependByteSlot(1, wantsQuickChat, 0)
}
func ReadyMessageAddWantsGameMessages(builder *flatbuffers.Builder, wantsGameMessages byte) {
	builder.PrependByteSlot(2, wantsGameMessages, 0)
}
func ReadyMessageEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
