// automatically generated by the FlatBuffers compiler, do not modify

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// The state of a rigid body in Rocket League's physics engine.
/// This gets updated in time with the physics tick, not the rendering framerate.
/// The frame field will be incremented every time the physics engine ticks.
type RigidBodyState struct {
	_tab flatbuffers.Table
}

func GetRootAsRigidBodyState(buf []byte, offset flatbuffers.UOffsetT) *RigidBodyState {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RigidBodyState{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *RigidBodyState) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RigidBodyState) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *RigidBodyState) Frame() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RigidBodyState) MutateFrame(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *RigidBodyState) Location(obj *Vector3) *Vector3 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Vector3)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *RigidBodyState) Rotation(obj *Quaternion) *Quaternion {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Quaternion)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *RigidBodyState) Velocity(obj *Vector3) *Vector3 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Vector3)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *RigidBodyState) AngularVelocity(obj *Vector3) *Vector3 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Vector3)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func RigidBodyStateStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func RigidBodyStateAddFrame(builder *flatbuffers.Builder, frame int32) {
	builder.PrependInt32Slot(0, frame, 0)
}
func RigidBodyStateAddLocation(builder *flatbuffers.Builder, location flatbuffers.UOffsetT) {
	builder.PrependStructSlot(1, flatbuffers.UOffsetT(location), 0)
}
func RigidBodyStateAddRotation(builder *flatbuffers.Builder, rotation flatbuffers.UOffsetT) {
	builder.PrependStructSlot(2, flatbuffers.UOffsetT(rotation), 0)
}
func RigidBodyStateAddVelocity(builder *flatbuffers.Builder, velocity flatbuffers.UOffsetT) {
	builder.PrependStructSlot(3, flatbuffers.UOffsetT(velocity), 0)
}
func RigidBodyStateAddAngularVelocity(builder *flatbuffers.Builder, angularVelocity flatbuffers.UOffsetT) {
	builder.PrependStructSlot(4, flatbuffers.UOffsetT(angularVelocity), 0)
}
func RigidBodyStateEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
