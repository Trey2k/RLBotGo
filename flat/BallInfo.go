// automatically generated by the FlatBuffers compiler, do not modify

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type BallInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsBallInfo(buf []byte, offset flatbuffers.UOffsetT) *BallInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &BallInfo{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *BallInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *BallInfo) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *BallInfo) Physics(obj *Physics) *Physics {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Physics)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *BallInfo) LatestTouch(obj *Touch) *Touch {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Touch)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *BallInfo) DropShotInfo(obj *DropShotBallInfo) *DropShotBallInfo {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(DropShotBallInfo)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *BallInfo) ShapeType() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BallInfo) MutateShapeType(n byte) bool {
	return rcv._tab.MutateByteSlot(10, n)
}

func (rcv *BallInfo) Shape(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func BallInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func BallInfoAddPhysics(builder *flatbuffers.Builder, physics flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(physics), 0)
}
func BallInfoAddLatestTouch(builder *flatbuffers.Builder, latestTouch flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(latestTouch), 0)
}
func BallInfoAddDropShotInfo(builder *flatbuffers.Builder, dropShotInfo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(dropShotInfo), 0)
}
func BallInfoAddShapeType(builder *flatbuffers.Builder, shapeType byte) {
	builder.PrependByteSlot(3, shapeType, 0)
}
func BallInfoAddShape(builder *flatbuffers.Builder, shape flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(shape), 0)
}
func BallInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
