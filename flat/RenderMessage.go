// automatically generated by the FlatBuffers compiler, do not modify

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type RenderMessage struct {
	_tab flatbuffers.Table
}

func GetRootAsRenderMessage(buf []byte, offset flatbuffers.UOffsetT) *RenderMessage {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RenderMessage{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *RenderMessage) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RenderMessage) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *RenderMessage) RenderType() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 1
}

func (rcv *RenderMessage) MutateRenderType(n int8) bool {
	return rcv._tab.MutateInt8Slot(4, n)
}

func (rcv *RenderMessage) Color(obj *Color) *Color {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Color)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// For 2d renders this only grabs x and y
func (rcv *RenderMessage) Start(obj *Vector3) *Vector3 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Vector3)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// For 2d renders this only grabs x and y
/// For 2d renders this only grabs x and y
func (rcv *RenderMessage) End(obj *Vector3) *Vector3 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Vector3)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// For 2d renders this only grabs x and y
/// Scales the x size of the text/rectangle, is used for rectangles assuming an initial value of 1
func (rcv *RenderMessage) ScaleX() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 1
}

/// Scales the x size of the text/rectangle, is used for rectangles assuming an initial value of 1
func (rcv *RenderMessage) MutateScaleX(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

/// Scales the y size of the text/rectangle, is used for rectangles assuming an initial value of 1
func (rcv *RenderMessage) ScaleY() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 1
}

/// Scales the y size of the text/rectangle, is used for rectangles assuming an initial value of 1
func (rcv *RenderMessage) MutateScaleY(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

func (rcv *RenderMessage) Text() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Rectangles can be filled or just outlines.
func (rcv *RenderMessage) IsFilled() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

/// Rectangles can be filled or just outlines.
func (rcv *RenderMessage) MutateIsFilled(n byte) bool {
	return rcv._tab.MutateByteSlot(18, n)
}

func RenderMessageStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func RenderMessageAddRenderType(builder *flatbuffers.Builder, renderType int8) {
	builder.PrependInt8Slot(0, renderType, 1)
}
func RenderMessageAddColor(builder *flatbuffers.Builder, color flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(color), 0)
}
func RenderMessageAddStart(builder *flatbuffers.Builder, start flatbuffers.UOffsetT) {
	builder.PrependStructSlot(2, flatbuffers.UOffsetT(start), 0)
}
func RenderMessageAddEnd(builder *flatbuffers.Builder, end flatbuffers.UOffsetT) {
	builder.PrependStructSlot(3, flatbuffers.UOffsetT(end), 0)
}
func RenderMessageAddScaleX(builder *flatbuffers.Builder, scaleX int32) {
	builder.PrependInt32Slot(4, scaleX, 1)
}
func RenderMessageAddScaleY(builder *flatbuffers.Builder, scaleY int32) {
	builder.PrependInt32Slot(5, scaleY, 1)
}
func RenderMessageAddText(builder *flatbuffers.Builder, text flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(text), 0)
}
func RenderMessageAddIsFilled(builder *flatbuffers.Builder, isFilled byte) {
	builder.PrependByteSlot(7, isFilled, 0)
}
func RenderMessageEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
