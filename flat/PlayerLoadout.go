// automatically generated by the FlatBuffers compiler, do not modify

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// The car type, color, and other aspects of the player's appearance.
/// See https://github.com/RLBot/RLBot/wiki/Bot-Customization
type PlayerLoadout struct {
	_tab flatbuffers.Table
}

func GetRootAsPlayerLoadout(buf []byte, offset flatbuffers.UOffsetT) *PlayerLoadout {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PlayerLoadout{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *PlayerLoadout) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PlayerLoadout) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *PlayerLoadout) TeamColorId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PlayerLoadout) MutateTeamColorId(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *PlayerLoadout) CustomColorId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PlayerLoadout) MutateCustomColorId(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *PlayerLoadout) CarId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PlayerLoadout) MutateCarId(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *PlayerLoadout) DecalId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PlayerLoadout) MutateDecalId(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *PlayerLoadout) WheelsId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PlayerLoadout) MutateWheelsId(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func (rcv *PlayerLoadout) BoostId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PlayerLoadout) MutateBoostId(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

func (rcv *PlayerLoadout) AntennaId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PlayerLoadout) MutateAntennaId(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

func (rcv *PlayerLoadout) HatId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PlayerLoadout) MutateHatId(n int32) bool {
	return rcv._tab.MutateInt32Slot(18, n)
}

func (rcv *PlayerLoadout) PaintFinishId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PlayerLoadout) MutatePaintFinishId(n int32) bool {
	return rcv._tab.MutateInt32Slot(20, n)
}

func (rcv *PlayerLoadout) CustomFinishId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PlayerLoadout) MutateCustomFinishId(n int32) bool {
	return rcv._tab.MutateInt32Slot(22, n)
}

func (rcv *PlayerLoadout) EngineAudioId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PlayerLoadout) MutateEngineAudioId(n int32) bool {
	return rcv._tab.MutateInt32Slot(24, n)
}

func (rcv *PlayerLoadout) TrailsId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PlayerLoadout) MutateTrailsId(n int32) bool {
	return rcv._tab.MutateInt32Slot(26, n)
}

func (rcv *PlayerLoadout) GoalExplosionId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PlayerLoadout) MutateGoalExplosionId(n int32) bool {
	return rcv._tab.MutateInt32Slot(28, n)
}

func (rcv *PlayerLoadout) LoadoutPaint(obj *LoadoutPaint) *LoadoutPaint {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(LoadoutPaint)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// Sets the primary color of the car to the swatch that most closely matches the provided
/// RGB color value. If set, this overrides teamColorId.
func (rcv *PlayerLoadout) PrimaryColorLookup(obj *Color) *Color {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Color)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// Sets the primary color of the car to the swatch that most closely matches the provided
/// RGB color value. If set, this overrides teamColorId.
/// Sets the secondary color of the car to the swatch that most closely matches the provided
/// RGB color value. If set, this overrides customColorId.
func (rcv *PlayerLoadout) SecondaryColorLookup(obj *Color) *Color {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Color)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// Sets the secondary color of the car to the swatch that most closely matches the provided
/// RGB color value. If set, this overrides customColorId.
func PlayerLoadoutStart(builder *flatbuffers.Builder) {
	builder.StartObject(16)
}
func PlayerLoadoutAddTeamColorId(builder *flatbuffers.Builder, teamColorId int32) {
	builder.PrependInt32Slot(0, teamColorId, 0)
}
func PlayerLoadoutAddCustomColorId(builder *flatbuffers.Builder, customColorId int32) {
	builder.PrependInt32Slot(1, customColorId, 0)
}
func PlayerLoadoutAddCarId(builder *flatbuffers.Builder, carId int32) {
	builder.PrependInt32Slot(2, carId, 0)
}
func PlayerLoadoutAddDecalId(builder *flatbuffers.Builder, decalId int32) {
	builder.PrependInt32Slot(3, decalId, 0)
}
func PlayerLoadoutAddWheelsId(builder *flatbuffers.Builder, wheelsId int32) {
	builder.PrependInt32Slot(4, wheelsId, 0)
}
func PlayerLoadoutAddBoostId(builder *flatbuffers.Builder, boostId int32) {
	builder.PrependInt32Slot(5, boostId, 0)
}
func PlayerLoadoutAddAntennaId(builder *flatbuffers.Builder, antennaId int32) {
	builder.PrependInt32Slot(6, antennaId, 0)
}
func PlayerLoadoutAddHatId(builder *flatbuffers.Builder, hatId int32) {
	builder.PrependInt32Slot(7, hatId, 0)
}
func PlayerLoadoutAddPaintFinishId(builder *flatbuffers.Builder, paintFinishId int32) {
	builder.PrependInt32Slot(8, paintFinishId, 0)
}
func PlayerLoadoutAddCustomFinishId(builder *flatbuffers.Builder, customFinishId int32) {
	builder.PrependInt32Slot(9, customFinishId, 0)
}
func PlayerLoadoutAddEngineAudioId(builder *flatbuffers.Builder, engineAudioId int32) {
	builder.PrependInt32Slot(10, engineAudioId, 0)
}
func PlayerLoadoutAddTrailsId(builder *flatbuffers.Builder, trailsId int32) {
	builder.PrependInt32Slot(11, trailsId, 0)
}
func PlayerLoadoutAddGoalExplosionId(builder *flatbuffers.Builder, goalExplosionId int32) {
	builder.PrependInt32Slot(12, goalExplosionId, 0)
}
func PlayerLoadoutAddLoadoutPaint(builder *flatbuffers.Builder, loadoutPaint flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(loadoutPaint), 0)
}
func PlayerLoadoutAddPrimaryColorLookup(builder *flatbuffers.Builder, primaryColorLookup flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(primaryColorLookup), 0)
}
func PlayerLoadoutAddSecondaryColorLookup(builder *flatbuffers.Builder, secondaryColorLookup flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(secondaryColorLookup), 0)
}
func PlayerLoadoutEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
