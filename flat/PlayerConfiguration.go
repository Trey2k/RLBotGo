// automatically generated by the FlatBuffers compiler, do not modify

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type PlayerConfiguration struct {
	_tab flatbuffers.Table
}

func GetRootAsPlayerConfiguration(buf []byte, offset flatbuffers.UOffsetT) *PlayerConfiguration {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PlayerConfiguration{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *PlayerConfiguration) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PlayerConfiguration) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *PlayerConfiguration) VarietyType() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PlayerConfiguration) MutateVarietyType(n byte) bool {
	return rcv._tab.MutateByteSlot(4, n)
}

func (rcv *PlayerConfiguration) Variety(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func (rcv *PlayerConfiguration) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *PlayerConfiguration) Team() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PlayerConfiguration) MutateTeam(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *PlayerConfiguration) Loadout(obj *PlayerLoadout) *PlayerLoadout {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(PlayerLoadout)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// In the case where the requested player index is not available, spawnId will help
/// the framework figure out what index was actually assigned to this player instead.
func (rcv *PlayerConfiguration) SpawnId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// In the case where the requested player index is not available, spawnId will help
/// the framework figure out what index was actually assigned to this player instead.
func (rcv *PlayerConfiguration) MutateSpawnId(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

func PlayerConfigurationStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func PlayerConfigurationAddVarietyType(builder *flatbuffers.Builder, varietyType byte) {
	builder.PrependByteSlot(0, varietyType, 0)
}
func PlayerConfigurationAddVariety(builder *flatbuffers.Builder, variety flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(variety), 0)
}
func PlayerConfigurationAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(name), 0)
}
func PlayerConfigurationAddTeam(builder *flatbuffers.Builder, team int32) {
	builder.PrependInt32Slot(3, team, 0)
}
func PlayerConfigurationAddLoadout(builder *flatbuffers.Builder, loadout flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(loadout), 0)
}
func PlayerConfigurationAddSpawnId(builder *flatbuffers.Builder, spawnId int32) {
	builder.PrependInt32Slot(5, spawnId, 0)
}
func PlayerConfigurationEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
