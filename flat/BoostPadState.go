// automatically generated by the FlatBuffers compiler, do not modify

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type BoostPadState struct {
	_tab flatbuffers.Table
}

func GetRootAsBoostPadState(buf []byte, offset flatbuffers.UOffsetT) *BoostPadState {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &BoostPadState{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *BoostPadState) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *BoostPadState) Table() flatbuffers.Table {
	return rcv._tab
}

/// True if the boost can be picked up
func (rcv *BoostPadState) IsActive() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

/// True if the boost can be picked up
func (rcv *BoostPadState) MutateIsActive(n byte) bool {
	return rcv._tab.MutateByteSlot(4, n)
}

/// The number of seconds since the boost has been picked up, or 0.0 if the boost is active.
func (rcv *BoostPadState) Timer() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The number of seconds since the boost has been picked up, or 0.0 if the boost is active.
func (rcv *BoostPadState) MutateTimer(n float32) bool {
	return rcv._tab.MutateFloat32Slot(6, n)
}

func BoostPadStateStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func BoostPadStateAddIsActive(builder *flatbuffers.Builder, isActive byte) {
	builder.PrependByteSlot(0, isActive, 0)
}
func BoostPadStateAddTimer(builder *flatbuffers.Builder, timer float32) {
	builder.PrependFloat32Slot(1, timer, 0.0)
}
func BoostPadStateEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
