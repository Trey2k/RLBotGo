// automatically generated by the FlatBuffers compiler, do not modify

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Specification for 'painted' items. See https://github.com/RLBot/RLBot/wiki/Bot-Customization
type LoadoutPaint struct {
	_tab flatbuffers.Table
}

func GetRootAsLoadoutPaint(buf []byte, offset flatbuffers.UOffsetT) *LoadoutPaint {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LoadoutPaint{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *LoadoutPaint) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LoadoutPaint) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *LoadoutPaint) CarPaintId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LoadoutPaint) MutateCarPaintId(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *LoadoutPaint) DecalPaintId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LoadoutPaint) MutateDecalPaintId(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *LoadoutPaint) WheelsPaintId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LoadoutPaint) MutateWheelsPaintId(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *LoadoutPaint) BoostPaintId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LoadoutPaint) MutateBoostPaintId(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *LoadoutPaint) AntennaPaintId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LoadoutPaint) MutateAntennaPaintId(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func (rcv *LoadoutPaint) HatPaintId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LoadoutPaint) MutateHatPaintId(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

func (rcv *LoadoutPaint) TrailsPaintId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LoadoutPaint) MutateTrailsPaintId(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

func (rcv *LoadoutPaint) GoalExplosionPaintId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LoadoutPaint) MutateGoalExplosionPaintId(n int32) bool {
	return rcv._tab.MutateInt32Slot(18, n)
}

func LoadoutPaintStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func LoadoutPaintAddCarPaintId(builder *flatbuffers.Builder, carPaintId int32) {
	builder.PrependInt32Slot(0, carPaintId, 0)
}
func LoadoutPaintAddDecalPaintId(builder *flatbuffers.Builder, decalPaintId int32) {
	builder.PrependInt32Slot(1, decalPaintId, 0)
}
func LoadoutPaintAddWheelsPaintId(builder *flatbuffers.Builder, wheelsPaintId int32) {
	builder.PrependInt32Slot(2, wheelsPaintId, 0)
}
func LoadoutPaintAddBoostPaintId(builder *flatbuffers.Builder, boostPaintId int32) {
	builder.PrependInt32Slot(3, boostPaintId, 0)
}
func LoadoutPaintAddAntennaPaintId(builder *flatbuffers.Builder, antennaPaintId int32) {
	builder.PrependInt32Slot(4, antennaPaintId, 0)
}
func LoadoutPaintAddHatPaintId(builder *flatbuffers.Builder, hatPaintId int32) {
	builder.PrependInt32Slot(5, hatPaintId, 0)
}
func LoadoutPaintAddTrailsPaintId(builder *flatbuffers.Builder, trailsPaintId int32) {
	builder.PrependInt32Slot(6, trailsPaintId, 0)
}
func LoadoutPaintAddGoalExplosionPaintId(builder *flatbuffers.Builder, goalExplosionPaintId int32) {
	builder.PrependInt32Slot(7, goalExplosionPaintId, 0)
}
func LoadoutPaintEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
