// automatically generated by the FlatBuffers compiler, do not modify

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Notification when the local player is spectating another player.
type PlayerSpectate struct {
	_tab flatbuffers.Table
}

func GetRootAsPlayerSpectate(buf []byte, offset flatbuffers.UOffsetT) *PlayerSpectate {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PlayerSpectate{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *PlayerSpectate) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PlayerSpectate) Table() flatbuffers.Table {
	return rcv._tab
}

/// index of the player that is being spectated. Will be -1 if not spectating anyone.
func (rcv *PlayerSpectate) PlayerIndex() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// index of the player that is being spectated. Will be -1 if not spectating anyone.
func (rcv *PlayerSpectate) MutatePlayerIndex(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func PlayerSpectateStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func PlayerSpectateAddPlayerIndex(builder *flatbuffers.Builder, playerIndex int32) {
	builder.PrependInt32Slot(0, playerIndex, 0)
}
func PlayerSpectateEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
