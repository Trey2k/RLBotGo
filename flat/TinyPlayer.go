// automatically generated by the FlatBuffers compiler, do not modify

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// A minimal version of player data, useful when bandwidth needs to be conserved.
type TinyPlayer struct {
	_tab flatbuffers.Table
}

func GetRootAsTinyPlayer(buf []byte, offset flatbuffers.UOffsetT) *TinyPlayer {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TinyPlayer{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *TinyPlayer) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TinyPlayer) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TinyPlayer) Location(obj *Vector3) *Vector3 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Vector3)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *TinyPlayer) Rotation(obj *Rotator) *Rotator {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Rotator)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *TinyPlayer) Velocity(obj *Vector3) *Vector3 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Vector3)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *TinyPlayer) HasWheelContact() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TinyPlayer) MutateHasWheelContact(n byte) bool {
	return rcv._tab.MutateByteSlot(10, n)
}

func (rcv *TinyPlayer) IsSupersonic() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TinyPlayer) MutateIsSupersonic(n byte) bool {
	return rcv._tab.MutateByteSlot(12, n)
}

func (rcv *TinyPlayer) Team() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TinyPlayer) MutateTeam(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

func (rcv *TinyPlayer) Boost() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TinyPlayer) MutateBoost(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

func TinyPlayerStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func TinyPlayerAddLocation(builder *flatbuffers.Builder, location flatbuffers.UOffsetT) {
	builder.PrependStructSlot(0, flatbuffers.UOffsetT(location), 0)
}
func TinyPlayerAddRotation(builder *flatbuffers.Builder, rotation flatbuffers.UOffsetT) {
	builder.PrependStructSlot(1, flatbuffers.UOffsetT(rotation), 0)
}
func TinyPlayerAddVelocity(builder *flatbuffers.Builder, velocity flatbuffers.UOffsetT) {
	builder.PrependStructSlot(2, flatbuffers.UOffsetT(velocity), 0)
}
func TinyPlayerAddHasWheelContact(builder *flatbuffers.Builder, hasWheelContact byte) {
	builder.PrependByteSlot(3, hasWheelContact, 0)
}
func TinyPlayerAddIsSupersonic(builder *flatbuffers.Builder, isSupersonic byte) {
	builder.PrependByteSlot(4, isSupersonic, 0)
}
func TinyPlayerAddTeam(builder *flatbuffers.Builder, team int32) {
	builder.PrependInt32Slot(5, team, 0)
}
func TinyPlayerAddBoost(builder *flatbuffers.Builder, boost int32) {
	builder.PrependInt32Slot(6, boost, 0)
}
func TinyPlayerEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
