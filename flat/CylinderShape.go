// automatically generated by the FlatBuffers compiler, do not modify

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CylinderShape struct {
	_tab flatbuffers.Table
}

func GetRootAsCylinderShape(buf []byte, offset flatbuffers.UOffsetT) *CylinderShape {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CylinderShape{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *CylinderShape) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CylinderShape) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CylinderShape) Diameter() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *CylinderShape) MutateDiameter(n float32) bool {
	return rcv._tab.MutateFloat32Slot(4, n)
}

func (rcv *CylinderShape) Height() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *CylinderShape) MutateHeight(n float32) bool {
	return rcv._tab.MutateFloat32Slot(6, n)
}

func CylinderShapeStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func CylinderShapeAddDiameter(builder *flatbuffers.Builder, diameter float32) {
	builder.PrependFloat32Slot(0, diameter, 0.0)
}
func CylinderShapeAddHeight(builder *flatbuffers.Builder, height float32) {
	builder.PrependFloat32Slot(1, height, 0.0)
}
func CylinderShapeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
