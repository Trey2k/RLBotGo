// automatically generated by the FlatBuffers compiler, do not modify

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Touch struct {
	_tab flatbuffers.Table
}

func GetRootAsTouch(buf []byte, offset flatbuffers.UOffsetT) *Touch {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Touch{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Touch) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Touch) Table() flatbuffers.Table {
	return rcv._tab
}

/// The name of the player involved with the touch.
func (rcv *Touch) PlayerName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The name of the player involved with the touch.
/// Seconds that had elapsed in the game when the touch occurred.
func (rcv *Touch) GameSeconds() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Seconds that had elapsed in the game when the touch occurred.
func (rcv *Touch) MutateGameSeconds(n float32) bool {
	return rcv._tab.MutateFloat32Slot(6, n)
}

/// The point of contact for the touch.
func (rcv *Touch) Location(obj *Vector3) *Vector3 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Vector3)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// The point of contact for the touch.
/// The direction of the touch.
func (rcv *Touch) Normal(obj *Vector3) *Vector3 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Vector3)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// The direction of the touch.
/// The Team which the touch belongs to, 0 for blue 1 for orange.
func (rcv *Touch) Team() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The Team which the touch belongs to, 0 for blue 1 for orange.
func (rcv *Touch) MutateTeam(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

/// The index of the player involved with the touch.
func (rcv *Touch) PlayerIndex() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The index of the player involved with the touch.
func (rcv *Touch) MutatePlayerIndex(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

func TouchStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func TouchAddPlayerName(builder *flatbuffers.Builder, playerName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(playerName), 0)
}
func TouchAddGameSeconds(builder *flatbuffers.Builder, gameSeconds float32) {
	builder.PrependFloat32Slot(1, gameSeconds, 0.0)
}
func TouchAddLocation(builder *flatbuffers.Builder, location flatbuffers.UOffsetT) {
	builder.PrependStructSlot(2, flatbuffers.UOffsetT(location), 0)
}
func TouchAddNormal(builder *flatbuffers.Builder, normal flatbuffers.UOffsetT) {
	builder.PrependStructSlot(3, flatbuffers.UOffsetT(normal), 0)
}
func TouchAddTeam(builder *flatbuffers.Builder, team int32) {
	builder.PrependInt32Slot(4, team, 0)
}
func TouchAddPlayerIndex(builder *flatbuffers.Builder, playerIndex int32) {
	builder.PrependInt32Slot(5, playerIndex, 0)
}
func TouchEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
