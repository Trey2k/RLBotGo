// automatically generated by the FlatBuffers compiler, do not modify

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MutatorSettings struct {
	_tab flatbuffers.Table
}

func GetRootAsMutatorSettings(buf []byte, offset flatbuffers.UOffsetT) *MutatorSettings {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MutatorSettings{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *MutatorSettings) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MutatorSettings) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MutatorSettings) MatchLength() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MutatorSettings) MutateMatchLength(n int8) bool {
	return rcv._tab.MutateInt8Slot(4, n)
}

func (rcv *MutatorSettings) MaxScore() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MutatorSettings) MutateMaxScore(n int8) bool {
	return rcv._tab.MutateInt8Slot(6, n)
}

func (rcv *MutatorSettings) OvertimeOption() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MutatorSettings) MutateOvertimeOption(n int8) bool {
	return rcv._tab.MutateInt8Slot(8, n)
}

func (rcv *MutatorSettings) SeriesLengthOption() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MutatorSettings) MutateSeriesLengthOption(n int8) bool {
	return rcv._tab.MutateInt8Slot(10, n)
}

func (rcv *MutatorSettings) GameSpeedOption() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MutatorSettings) MutateGameSpeedOption(n int8) bool {
	return rcv._tab.MutateInt8Slot(12, n)
}

func (rcv *MutatorSettings) BallMaxSpeedOption() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MutatorSettings) MutateBallMaxSpeedOption(n int8) bool {
	return rcv._tab.MutateInt8Slot(14, n)
}

func (rcv *MutatorSettings) BallTypeOption() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MutatorSettings) MutateBallTypeOption(n int8) bool {
	return rcv._tab.MutateInt8Slot(16, n)
}

func (rcv *MutatorSettings) BallWeightOption() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MutatorSettings) MutateBallWeightOption(n int8) bool {
	return rcv._tab.MutateInt8Slot(18, n)
}

func (rcv *MutatorSettings) BallSizeOption() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MutatorSettings) MutateBallSizeOption(n int8) bool {
	return rcv._tab.MutateInt8Slot(20, n)
}

func (rcv *MutatorSettings) BallBouncinessOption() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MutatorSettings) MutateBallBouncinessOption(n int8) bool {
	return rcv._tab.MutateInt8Slot(22, n)
}

func (rcv *MutatorSettings) BoostOption() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MutatorSettings) MutateBoostOption(n int8) bool {
	return rcv._tab.MutateInt8Slot(24, n)
}

func (rcv *MutatorSettings) RumbleOption() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MutatorSettings) MutateRumbleOption(n int8) bool {
	return rcv._tab.MutateInt8Slot(26, n)
}

func (rcv *MutatorSettings) BoostStrengthOption() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MutatorSettings) MutateBoostStrengthOption(n int8) bool {
	return rcv._tab.MutateInt8Slot(28, n)
}

func (rcv *MutatorSettings) GravityOption() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MutatorSettings) MutateGravityOption(n int8) bool {
	return rcv._tab.MutateInt8Slot(30, n)
}

func (rcv *MutatorSettings) DemolishOption() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MutatorSettings) MutateDemolishOption(n int8) bool {
	return rcv._tab.MutateInt8Slot(32, n)
}

func (rcv *MutatorSettings) RespawnTimeOption() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MutatorSettings) MutateRespawnTimeOption(n int8) bool {
	return rcv._tab.MutateInt8Slot(34, n)
}

func MutatorSettingsStart(builder *flatbuffers.Builder) {
	builder.StartObject(16)
}
func MutatorSettingsAddMatchLength(builder *flatbuffers.Builder, matchLength int8) {
	builder.PrependInt8Slot(0, matchLength, 0)
}
func MutatorSettingsAddMaxScore(builder *flatbuffers.Builder, maxScore int8) {
	builder.PrependInt8Slot(1, maxScore, 0)
}
func MutatorSettingsAddOvertimeOption(builder *flatbuffers.Builder, overtimeOption int8) {
	builder.PrependInt8Slot(2, overtimeOption, 0)
}
func MutatorSettingsAddSeriesLengthOption(builder *flatbuffers.Builder, seriesLengthOption int8) {
	builder.PrependInt8Slot(3, seriesLengthOption, 0)
}
func MutatorSettingsAddGameSpeedOption(builder *flatbuffers.Builder, gameSpeedOption int8) {
	builder.PrependInt8Slot(4, gameSpeedOption, 0)
}
func MutatorSettingsAddBallMaxSpeedOption(builder *flatbuffers.Builder, ballMaxSpeedOption int8) {
	builder.PrependInt8Slot(5, ballMaxSpeedOption, 0)
}
func MutatorSettingsAddBallTypeOption(builder *flatbuffers.Builder, ballTypeOption int8) {
	builder.PrependInt8Slot(6, ballTypeOption, 0)
}
func MutatorSettingsAddBallWeightOption(builder *flatbuffers.Builder, ballWeightOption int8) {
	builder.PrependInt8Slot(7, ballWeightOption, 0)
}
func MutatorSettingsAddBallSizeOption(builder *flatbuffers.Builder, ballSizeOption int8) {
	builder.PrependInt8Slot(8, ballSizeOption, 0)
}
func MutatorSettingsAddBallBouncinessOption(builder *flatbuffers.Builder, ballBouncinessOption int8) {
	builder.PrependInt8Slot(9, ballBouncinessOption, 0)
}
func MutatorSettingsAddBoostOption(builder *flatbuffers.Builder, boostOption int8) {
	builder.PrependInt8Slot(10, boostOption, 0)
}
func MutatorSettingsAddRumbleOption(builder *flatbuffers.Builder, rumbleOption int8) {
	builder.PrependInt8Slot(11, rumbleOption, 0)
}
func MutatorSettingsAddBoostStrengthOption(builder *flatbuffers.Builder, boostStrengthOption int8) {
	builder.PrependInt8Slot(12, boostStrengthOption, 0)
}
func MutatorSettingsAddGravityOption(builder *flatbuffers.Builder, gravityOption int8) {
	builder.PrependInt8Slot(13, gravityOption, 0)
}
func MutatorSettingsAddDemolishOption(builder *flatbuffers.Builder, demolishOption int8) {
	builder.PrependInt8Slot(14, demolishOption, 0)
}
func MutatorSettingsAddRespawnTimeOption(builder *flatbuffers.Builder, respawnTimeOption int8) {
	builder.PrependInt8Slot(15, respawnTimeOption, 0)
}
func MutatorSettingsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
