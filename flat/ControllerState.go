// automatically generated by the FlatBuffers compiler, do not modify

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ControllerState struct {
	_tab flatbuffers.Table
}

func GetRootAsControllerState(buf []byte, offset flatbuffers.UOffsetT) *ControllerState {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ControllerState{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *ControllerState) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ControllerState) Table() flatbuffers.Table {
	return rcv._tab
}

/// -1 for full reverse, 1 for full forward
func (rcv *ControllerState) Throttle() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

/// -1 for full reverse, 1 for full forward
func (rcv *ControllerState) MutateThrottle(n float32) bool {
	return rcv._tab.MutateFloat32Slot(4, n)
}

/// -1 for full left, 1 for full right
func (rcv *ControllerState) Steer() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

/// -1 for full left, 1 for full right
func (rcv *ControllerState) MutateSteer(n float32) bool {
	return rcv._tab.MutateFloat32Slot(6, n)
}

/// -1 for nose down, 1 for nose up
func (rcv *ControllerState) Pitch() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

/// -1 for nose down, 1 for nose up
func (rcv *ControllerState) MutatePitch(n float32) bool {
	return rcv._tab.MutateFloat32Slot(8, n)
}

/// -1 for full left, 1 for full right
func (rcv *ControllerState) Yaw() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

/// -1 for full left, 1 for full right
func (rcv *ControllerState) MutateYaw(n float32) bool {
	return rcv._tab.MutateFloat32Slot(10, n)
}

/// -1 for roll left, 1 for roll right
func (rcv *ControllerState) Roll() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

/// -1 for roll left, 1 for roll right
func (rcv *ControllerState) MutateRoll(n float32) bool {
	return rcv._tab.MutateFloat32Slot(12, n)
}

/// true if you want to press the jump button
func (rcv *ControllerState) Jump() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

/// true if you want to press the jump button
func (rcv *ControllerState) MutateJump(n byte) bool {
	return rcv._tab.MutateByteSlot(14, n)
}

/// true if you want to press the boost button
func (rcv *ControllerState) Boost() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

/// true if you want to press the boost button
func (rcv *ControllerState) MutateBoost(n byte) bool {
	return rcv._tab.MutateByteSlot(16, n)
}

/// true if you want to press the handbrake button
func (rcv *ControllerState) Handbrake() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

/// true if you want to press the handbrake button
func (rcv *ControllerState) MutateHandbrake(n byte) bool {
	return rcv._tab.MutateByteSlot(18, n)
}

/// true if you want to press the 'use item' button, used in rumble etc.
func (rcv *ControllerState) UseItem() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

/// true if you want to press the 'use item' button, used in rumble etc.
func (rcv *ControllerState) MutateUseItem(n byte) bool {
	return rcv._tab.MutateByteSlot(20, n)
}

func ControllerStateStart(builder *flatbuffers.Builder) {
	builder.StartObject(9)
}
func ControllerStateAddThrottle(builder *flatbuffers.Builder, throttle float32) {
	builder.PrependFloat32Slot(0, throttle, 0.0)
}
func ControllerStateAddSteer(builder *flatbuffers.Builder, steer float32) {
	builder.PrependFloat32Slot(1, steer, 0.0)
}
func ControllerStateAddPitch(builder *flatbuffers.Builder, pitch float32) {
	builder.PrependFloat32Slot(2, pitch, 0.0)
}
func ControllerStateAddYaw(builder *flatbuffers.Builder, yaw float32) {
	builder.PrependFloat32Slot(3, yaw, 0.0)
}
func ControllerStateAddRoll(builder *flatbuffers.Builder, roll float32) {
	builder.PrependFloat32Slot(4, roll, 0.0)
}
func ControllerStateAddJump(builder *flatbuffers.Builder, jump byte) {
	builder.PrependByteSlot(5, jump, 0)
}
func ControllerStateAddBoost(builder *flatbuffers.Builder, boost byte) {
	builder.PrependByteSlot(6, boost, 0)
}
func ControllerStateAddHandbrake(builder *flatbuffers.Builder, handbrake byte) {
	builder.PrependByteSlot(7, handbrake, 0)
}
func ControllerStateAddUseItem(builder *flatbuffers.Builder, useItem byte) {
	builder.PrependByteSlot(8, useItem, 0)
}
func ControllerStateEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
