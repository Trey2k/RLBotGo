// automatically generated by the FlatBuffers compiler, do not modify

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Physics struct {
	_tab flatbuffers.Table
}

func GetRootAsPhysics(buf []byte, offset flatbuffers.UOffsetT) *Physics {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Physics{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Physics) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Physics) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Physics) Location(obj *Vector3) *Vector3 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Vector3)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Physics) Rotation(obj *Rotator) *Rotator {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Rotator)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Physics) Velocity(obj *Vector3) *Vector3 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Vector3)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Physics) AngularVelocity(obj *Vector3) *Vector3 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Vector3)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func PhysicsStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func PhysicsAddLocation(builder *flatbuffers.Builder, location flatbuffers.UOffsetT) {
	builder.PrependStructSlot(0, flatbuffers.UOffsetT(location), 0)
}
func PhysicsAddRotation(builder *flatbuffers.Builder, rotation flatbuffers.UOffsetT) {
	builder.PrependStructSlot(1, flatbuffers.UOffsetT(rotation), 0)
}
func PhysicsAddVelocity(builder *flatbuffers.Builder, velocity flatbuffers.UOffsetT) {
	builder.PrependStructSlot(2, flatbuffers.UOffsetT(velocity), 0)
}
func PhysicsAddAngularVelocity(builder *flatbuffers.Builder, angularVelocity flatbuffers.UOffsetT) {
	builder.PrependStructSlot(3, flatbuffers.UOffsetT(angularVelocity), 0)
}
func PhysicsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
