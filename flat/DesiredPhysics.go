// automatically generated by the FlatBuffers compiler, do not modify

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DesiredPhysics struct {
	_tab flatbuffers.Table
}

func GetRootAsDesiredPhysics(buf []byte, offset flatbuffers.UOffsetT) *DesiredPhysics {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DesiredPhysics{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *DesiredPhysics) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DesiredPhysics) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DesiredPhysics) Location(obj *Vector3Partial) *Vector3Partial {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Vector3Partial)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *DesiredPhysics) Rotation(obj *RotatorPartial) *RotatorPartial {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(RotatorPartial)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *DesiredPhysics) Velocity(obj *Vector3Partial) *Vector3Partial {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Vector3Partial)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *DesiredPhysics) AngularVelocity(obj *Vector3Partial) *Vector3Partial {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Vector3Partial)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func DesiredPhysicsStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func DesiredPhysicsAddLocation(builder *flatbuffers.Builder, location flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(location), 0)
}
func DesiredPhysicsAddRotation(builder *flatbuffers.Builder, rotation flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(rotation), 0)
}
func DesiredPhysicsAddVelocity(builder *flatbuffers.Builder, velocity flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(velocity), 0)
}
func DesiredPhysicsAddAngularVelocity(builder *flatbuffers.Builder, angularVelocity flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(angularVelocity), 0)
}
func DesiredPhysicsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
