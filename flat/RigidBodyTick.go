// automatically generated by the FlatBuffers compiler, do not modify

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Contains all rigid body state information.
type RigidBodyTick struct {
	_tab flatbuffers.Table
}

func GetRootAsRigidBodyTick(buf []byte, offset flatbuffers.UOffsetT) *RigidBodyTick {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RigidBodyTick{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *RigidBodyTick) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RigidBodyTick) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *RigidBodyTick) Ball(obj *BallRigidBodyState) *BallRigidBodyState {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(BallRigidBodyState)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *RigidBodyTick) Players(obj *PlayerRigidBodyState, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *RigidBodyTick) PlayersLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func RigidBodyTickStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func RigidBodyTickAddBall(builder *flatbuffers.Builder, ball flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(ball), 0)
}
func RigidBodyTickAddPlayers(builder *flatbuffers.Builder, players flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(players), 0)
}
func RigidBodyTickStartPlayersVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RigidBodyTickEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
