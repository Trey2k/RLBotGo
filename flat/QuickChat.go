// automatically generated by the FlatBuffers compiler, do not modify

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type QuickChat struct {
	_tab flatbuffers.Table
}

func GetRootAsQuickChat(buf []byte, offset flatbuffers.UOffsetT) *QuickChat {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &QuickChat{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *QuickChat) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *QuickChat) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *QuickChat) QuickChatSelection() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *QuickChat) MutateQuickChatSelection(n int8) bool {
	return rcv._tab.MutateInt8Slot(4, n)
}

/// The index of the player that sent the quick chat
func (rcv *QuickChat) PlayerIndex() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The index of the player that sent the quick chat
func (rcv *QuickChat) MutatePlayerIndex(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

/// True if the chat is team only false if everyone can see it.
func (rcv *QuickChat) TeamOnly() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

/// True if the chat is team only false if everyone can see it.
func (rcv *QuickChat) MutateTeamOnly(n byte) bool {
	return rcv._tab.MutateByteSlot(8, n)
}

func (rcv *QuickChat) MessageIndex() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *QuickChat) MutateMessageIndex(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *QuickChat) TimeStamp() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *QuickChat) MutateTimeStamp(n float32) bool {
	return rcv._tab.MutateFloat32Slot(12, n)
}

func QuickChatStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func QuickChatAddQuickChatSelection(builder *flatbuffers.Builder, quickChatSelection int8) {
	builder.PrependInt8Slot(0, quickChatSelection, 0)
}
func QuickChatAddPlayerIndex(builder *flatbuffers.Builder, playerIndex int32) {
	builder.PrependInt32Slot(1, playerIndex, 0)
}
func QuickChatAddTeamOnly(builder *flatbuffers.Builder, teamOnly byte) {
	builder.PrependByteSlot(2, teamOnly, 0)
}
func QuickChatAddMessageIndex(builder *flatbuffers.Builder, messageIndex int32) {
	builder.PrependInt32Slot(3, messageIndex, 0)
}
func QuickChatAddTimeStamp(builder *flatbuffers.Builder, timeStamp float32) {
	builder.PrependFloat32Slot(4, timeStamp, 0.0)
}
func QuickChatEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
