// automatically generated by the FlatBuffers compiler, do not modify

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type BoostPad struct {
	_tab flatbuffers.Table
}

func GetRootAsBoostPad(buf []byte, offset flatbuffers.UOffsetT) *BoostPad {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &BoostPad{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *BoostPad) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *BoostPad) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *BoostPad) Location(obj *Vector3) *Vector3 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Vector3)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *BoostPad) IsFullBoost() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BoostPad) MutateIsFullBoost(n byte) bool {
	return rcv._tab.MutateByteSlot(6, n)
}

func BoostPadStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func BoostPadAddLocation(builder *flatbuffers.Builder, location flatbuffers.UOffsetT) {
	builder.PrependStructSlot(0, flatbuffers.UOffsetT(location), 0)
}
func BoostPadAddIsFullBoost(builder *flatbuffers.Builder, isFullBoost byte) {
	builder.PrependByteSlot(1, isFullBoost, 0)
}
func BoostPadEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
